import {
    ActionService,
    ActionServiceContract,
    ApiKeyService,
    ApiKeyServiceContract,
    BotService,
    BotServiceContract,
    CategoryProductService,
    CategoryProductServiceContract,
    CategoryService,
    CategoryServiceContract,
    CircularDependenciesResolverService,
    CircularDependenciesResolverServiceContract,
    CompanyService,
    CompanyServiceContract,
    CustomerService,
    CustomerServiceContract,
    EmbedService,
    EmbedServiceContract,
    MailService,
    MailServiceContract,
    MetaService,
    MetaServiceContract,
    NegotiationService,
    NegotiationServiceContract,
    NotificationMailTemplateService,
    NotificationMailTemplateServiceContract,
    NotificationService,
    NotificationServiceContract,
    OrganisationCompanyService,
    OrganisationCompanyServiceContract,
    OrganisationService,
    OrganisationServiceContract,
    PermissionService,
    PermissionServiceContract,
    ProductParameterService,
    ProductParameterServiceContract,
    ProductService,
    ProductServiceContract,
    RfqItemService,
    RfqItemServiceContract,
    RfqNegotiationActionsService,
    RfqNegotiationActionsServiceContract,
    RfqNegotiationService,
    RfqNegotiationServiceContract,
    RfqNotificationService,
    RfqNotificationServiceContract,
    RfqProcurementNegotiationService,
    RfqProcurementNegotiationServiceContract,
    RfqService,
    RfqServiceContract,
    RfqSupplierService,
    RfqSupplierServiceContract,
    SeedService,
    SeedServiceContract,
    SessionService,
    SessionServiceContract,
    SettingService,
    SettingServiceContract,
    SupplierCategoryProductService,
    SupplierCategoryProductServiceContract,
    SupplierCompanyService,
    SupplierCompanyServiceContract,
    SupplierOrganisationService,
    SupplierOrganisationServiceContract,
    SupplierService,
    SupplierServiceContract,
    SupplierUserService,
    SupplierUserServiceContract,
    SupplierWebhookService,
    SupplierWebhookServiceContract,
    TenantService,
    TenantServiceContract,
    TenantUserService,
    TenantUserServiceContract,
    TwilioService,
    TwilioServiceContract,
    UserOrganisationService,
    UserOrganisationServiceContract,
    UserService,
    UserServiceContract,
    WebhookService,
    WebhookServiceContract,
} from '@negobot/shared/';

import { Container } from 'inversify';

export class Services {
    public static bootstrap(container: Container): void {
        container.bind<ApiKeyServiceContract>('ApiKeyService').to(ApiKeyService);
        container.bind<BotServiceContract>('BotService').to(BotService);
        container.bind<ActionServiceContract>('ActionService').to(ActionService);
        container.bind<SessionServiceContract>('SessionService').to(SessionService);
        container.bind<TwilioServiceContract>('TwilioService').to(TwilioService);

        container.bind<CategoryServiceContract>('CategoryService').to(CategoryService);
        container.bind<CustomerServiceContract>('CustomerService').to(CustomerService);
        container.bind<EmbedServiceContract>('EmbedService').to(EmbedService);
        container.bind<MailServiceContract>('MailService').to(MailService);
        container.bind<MetaServiceContract>('MetaService').to(MetaService);
        container.bind<NegotiationServiceContract>('NegotiationService').to(NegotiationService);
        container.bind<PermissionServiceContract>('PermissionService').to(PermissionService);
        container.bind<OrganisationServiceContract>('OrganisationService').to(OrganisationService);
        container.bind<SeedServiceContract>('SeedService').to(SeedService);
        container.bind<SettingServiceContract>('SettingService').to(SettingService);
        container.bind<UserOrganisationServiceContract>('UserOrganisationService').to(UserOrganisationService);
        container.bind<UserServiceContract>('UserService').to(UserService);
        container.bind<TenantServiceContract>('TenantService').to(TenantService);
        container.bind<TenantUserServiceContract>('TenantUserService').to(TenantUserService);
        container.bind<ProductParameterServiceContract>('ProductParameterService').to(ProductParameterService);
        container.bind<ProductServiceContract>('ProductService').to(ProductService);
        container.bind<WebhookServiceContract>('WebhookService').to(WebhookService);
        container.bind<CompanyServiceContract>('CompanyService').to(CompanyService);
        container.bind<SupplierWebhookServiceContract>('SupplierWebhookService').to(SupplierWebhookService);
        container.bind<OrganisationCompanyServiceContract>('OrganisationCompanyService').to(OrganisationCompanyService);
        container.bind<RfqServiceContract>('RfqService').to(RfqService);
        container.bind<RfqSupplierServiceContract>('RfqSupplierService').to(RfqSupplierService);
        container.bind<RfqItemServiceContract>('RfqItemService').to(RfqItemService);
        container.bind<CategoryProductServiceContract>('CategoryProductService').to(CategoryProductService);
        container.bind<SupplierServiceContract>('SupplierService').to(SupplierService);
        container.bind<SupplierUserServiceContract>('SupplierUserService').to(SupplierUserService);
        container
            .bind<SupplierOrganisationServiceContract>('SupplierOrganisationService')
            .to(SupplierOrganisationService);

        container.bind<NotificationServiceContract>('NotificationService').to(NotificationService);
        container.bind<RfqNegotiationServiceContract>('RfqNegotiationService').to(RfqNegotiationService);
        container
            .bind<RfqProcurementNegotiationServiceContract>('RfqProcurementNegotiationService')
            .to(RfqProcurementNegotiationService);
        container
            .bind<RfqNegotiationActionsServiceContract>('RfqNegotiationActionsService')
            .to(RfqNegotiationActionsService);
        container
            .bind<CircularDependenciesResolverServiceContract>('CircularDependenciesResolverService')
            .to(CircularDependenciesResolverService);
        container.bind<RfqNotificationServiceContract>('RfqNotificationService').to(RfqNotificationService);
        container
            .bind<NotificationMailTemplateServiceContract>('NotificationMailTemplateService')
            .to(NotificationMailTemplateService);
        container
            .bind<SupplierCategoryProductServiceContract>('SupplierCategoryProductService')
            .to(SupplierCategoryProductService);
        container.bind<SupplierCompanyServiceContract>('SupplierCompanyService').to(SupplierCompanyService);
    }
}
